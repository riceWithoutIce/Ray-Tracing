// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
// camera to world
float4x4 _C2W;
// camera projection inverse
float4x4 _IP;
// sky box
Texture2D<float4> _SkyboxTex;
SamplerState sampler_SkyboxTex;
float2 _PixelOffset;
// light
float4 _DirectionalLight;

static const float PI = 3.14159265f;

struct Ray
{
    float3 ori;
    float3 dir;
    // energy
    float3 e;
};

struct RayHit
{
    float3 pos;
    float dis;
    float3 normal;
    float3 albedo;
    float3 spec;
    float smoothness;
    float3 emission;
};

struct Sphere
{
    float3 pos;
    // radius
    float r;
    float3 albedo;
    float3 spec;
    float smoothness;
    float3 emission;
};

// spheres
StructuredBuffer<Sphere> _Spheres;

// --------------------------------------------------------------------------
// rand
float2 _Pixel;
float _Seed;
inline float Rand()
{
    float result = frac(sin(_Seed / 100.0f * dot(_Pixel, float2(12.9898f, 78.233f))) * 43758.5453f);
    _Seed += 1.0f;
    return result;
}

inline float3x3 GetTangentSpace(float3 normal)
{
    float3 helper = float3(1, 0, 0);
    if (abs(normal.x) > 0.99f)
        helper = float3(0, 0, 1);

    float3 tangent = normalize(cross(normal, helper));
    float3 binormal = normalize(cross(normal, tangent));
    return float3x3(tangent, binormal, normal);
}

inline float3 SampleHemisphere(float3 normal, float alpha)
{
    float cosTheta = pow(Rand(), 1.0f / (alpha + 1.0f));
    float sinTheta = sqrt(1.0f - cosTheta * cosTheta);
    float phi = 2 * PI * Rand();
    float3 tanSpaceDir = float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);

    return mul(tanSpaceDir, GetTangentSpace(normal));
}

inline float sdot(float3 x, float3 y, float f = 1.0f)
{
    return saturate(dot(x, y) * f);
}

inline float SmoothnessToPhongAlpha(float s)
{
    return pow(1000.0f, s * s);
}

// --------------------------------------------------------------------------

inline Ray CreateRay(float3 ori, float3 dir)
{
    Ray ray;
    ray.ori = ori;
    ray.dir = dir;
    ray.e = 1.0f;

    return ray;
}

inline Ray CreateCameraRay(float2 uv)
{
    float3 ori = mul(_C2W, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    float3 dir = mul(_IP, float4(uv, 0.0f, 1.0f)).xyz;
    dir = mul(_C2W, float4(dir, 0.0f)).xyz;
    dir = normalize(dir);

    return CreateRay(ori, dir);
}

inline RayHit CreateRayHit()
{
    RayHit hit;
    hit.pos = 0.0f;
    hit.dis = 1.#INF;
    hit.normal = 0.0f;
    hit.smoothness = 0.0f;
    hit.emission = 0;

    return hit;
}

inline void IntersectGroundPlane(Ray ray, inout RayHit hit)
{
    float t = -ray.ori.y / ray.dir.y;
    if (t > 0 && t < hit.dis)
    {
        hit.dis = t;
        hit.pos = ray.ori + t * ray.dir;
        hit.normal = float3(0.0f, 1.0f, 0.0f);
        hit.albedo = 0.05;
        hit.spec = 0;
        hit.smoothness = 0.0f;
        hit.emission = 0;
    }
}

inline void IntersectSphere(Ray ray, inout RayHit hit, Sphere sphere)
{
    float3 d = ray.ori - sphere.pos;
    float p1 = -dot(ray.dir, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.r * sphere.r;
    if (p2sqr < 0)
        return;

    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < hit.dis)
    {
        hit.dis = t;
        hit.pos = ray.ori + t * ray.dir;
        hit.normal = normalize(hit.pos - sphere.pos);
        hit.albedo = sphere.albedo;
        hit.spec = sphere.spec;
        hit.smoothness = sphere.smoothness;
        hit.emission = sphere.emission;
    }
}

inline RayHit Trace(Ray ray)
{
    RayHit hit = CreateRayHit();

    uint num, stride;
    _Spheres.GetDimensions(num, stride);
    for (uint i = 0; i < num; i++)
    {
        IntersectSphere(ray, hit, _Spheres[i]);
    }

    IntersectGroundPlane(ray, hit);
    return hit;
}

inline float Energy(float3 color)
{
    return dot(color, 1.0f / 3.0f);
}

inline float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.dis < 1.#INF)
    {
        hit.albedo = min(1.0f - hit.spec, hit.albedo);
        float specChance = Energy(hit.spec);
        float diffChance = Energy(hit.albedo);
        float sum = specChance + diffChance;
        specChance /= sum;
        diffChance /= sum;

        float roulette = Rand();
        ray.ori = hit.pos + hit.normal * 0.001f;
        if (roulette < specChance)
        {
            // ray.dir = reflect(ray.dir, hit.normal);
            float alpha = SmoothnessToPhongAlpha(hit.smoothness);
            ray.dir = SampleHemisphere(reflect(ray.dir, hit.normal), alpha);
            float f = (alpha + 2) / (alpha + 1);
            ray.e *= (1.0 / specChance) * hit.spec * sdot(hit.normal, ray.dir, f);
        }
        else
        {
            ray.dir = SampleHemisphere(hit.normal, 1.0f);
            ray.e *= (1.0 / diffChance) * 2 * hit.albedo;
        }
        return hit.emission;

        // ray.ori = hit.pos + hit.normal * 0.001f;
        // float3 reflected = reflect(ray.dir, hit.normal);
        // ray.dir = SampleHemisphere(hit.normal);
        // float3 diff = 2 * min(1.0 - hit.spec, hit.albedo);
        // float alpha = 300.0f;
        // float3 spec = hit.spec * (alpha + 2) * pow(sdot(ray.dir, reflected), alpha);
        // ray.e *= (diff + spec) * sdot(hit.normal, ray.dir);
        // return 0.0f;

        // ray.ori = hit.pos + hit.normal * 0.001f;
        // ray.dir = reflect(ray.dir, hit.normal);
        // ray.e *= hit.spec;

        // // shadow
        // bool shadow = false;
        // Ray shadowRay = CreateRay(hit.pos + hit.normal * 0.001f, -1 * _DirectionalLight.xyz);
        // RayHit shadowHit = Trace(shadowRay);
        // if (shadowHit.dis != 1.#INF)
        // {
        //        return 0.0f;
        // }

        // float nl = dot(hit.normal, _DirectionalLight.xyz);
        // float3 col = saturate(-nl * _DirectionalLight.w * hit.albedo);

        // return col;
    }
    else
    {
        ray.e = 0.0f;

        float theta = acos(ray.dir.y) / -PI;
        float phi = atan2(ray.dir.x, -ray.dir.z) / -PI * 0.5f;
        return _SkyboxTex.SampleLevel(sampler_SkyboxTex, float2(phi, theta), 0).xyz;
    }
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    uint width, height;
    _Pixel = id.xy;

    Result.GetDimensions(width, height);
    float2 uv = id.xy + _PixelOffset;
    uv /= float2(width, height) * 2.0f - 1.0f;

    Ray ray = CreateCameraRay(uv);

    float3 result = 0.0f;
    for (int i = 0; i < 8; i++)
    {
        RayHit hit = Trace(ray);
        result += ray.e * Shade(ray, hit);

        if (!any(ray.e))
            break;
    }

    Result[id.xy] = float4(result, 1);
}
